#Created by Xueyi Xing, Jan, 2018
#Copy allsubinsur.csv, echocon_xx.sas7bdat, echoconpv_xx.sas7bdat, bid.csv, BOXPAProviderListxxxx.csv, BOXPAChildrenListxxxx.csv, BOXNCProviderListxxxx.csv, and BOXNCChildrenListxxxx.csv into the same folder you are working at. 
#set working directory
#SOURCE this line first, DO NOT use run.
rm(list=ls())
mydir <-dirname(parent.frame(2)$ofile)
setwd(mydir)
stop( "You already changed your working directory. Please disregard the error message and continue to run the rest codes. :)")
#########################################
#install necessary packages if you do not have following packages installed in R.
#install.packages("foreign")
#install.packages("Hmisc")
#install.packages("dplyr")
#install.packages("sas7bdat")
#install.packages("haven")
#install.packages("data.table")

library(foreign)
library(Hmisc)
library(dplyr)
library(sas7bdat)
library(haven)
library(data.table)

#change these names every time
consentlist<-'echocon_37.sas7bdat'
consentnames<-'echoconpv_37.sas7bdat'
PAinputboxproviderlist<-"BOXPAProviderList031819.csv"
PAinputboxchildlist<-"BOXPAChildrenList031819.csv"
PAoutputboxproviderlist<-"BOXPAProviderList052119.csv"
PAoutputboxchildlist<-"BOXPAChildrenList052119.csv"
NCinputboxproviderlist<-"BOXNCProviderList031819.csv"
NCinputboxchildlist<-"BOXNCChildrenList031819.csv"
NCoutputboxproviderlist<-"BOXNCProviderList052119.csv"
NCoutputboxchildlist<-"BOXNCChildrenList052119.csv"
NCconsentwithchildnames<-"NCConsentListWithUniqueNames052119.csv"
PAconsentwithchildnames<-"PAConsentListWithUniqueNames052119.csv"
#create dataset for all subjects
#all subjects with insurance info;
allsubinsur<-read.csv('allsubinsur.csv')
allsubinsur<-allsubinsur[c(1:4,13:21,76)]

colnames(allsubinsur)<-c('FLPID','state','months','resid','clinicname','knowstreet','addnum','direction','street','suffixdirc','city','State','zip','lclprovider')
head(allsubinsur)

#collect health provider names
m<-nrow(allsubinsur)
allsubinsur$clinicname<-as.character(allsubinsur$clinicname)
allsubinsur$lclprovider<-as.character(allsubinsur$lclprovider)
for (i in 1:m){
  if (allsubinsur$clinicname[i]== ''){ allsubinsur $clinicname2[i]<- allsubinsur $lclprovider[i]}
  else { allsubinsur $clinicname2[i]<- allsubinsur $clinicname[i]}
}
allsubinsur$clinicname3=ifelse(allsubinsur$clinicname2=="","Missing", allsubinsur$clinicname2)
head(allsubinsur)

#Merge consent data and all insurance data, get the clinic names from insurance list
#pa7 is the list of subjects who gave consent, including both pa and nc (see SAS codes 'paclinics.sas').

#read sas file
pa7a <- read_sas(consentlist)
#or pa7a <- read.sas7bdat(consentlist)
View(pa7a)
bid<-read.csv('bid.csv')
nrow(bid)
pa7aaddv<-pa7a[c(1:2,28,33,42,44,305)]
pa7aaddv2<-merge(pa7aaddv, bid, by='S_ID')
#delete state;
pa7aaddv2<-pa7aaddv2[-c(9)]
pa7aaddv2nc<-pa7aaddv2[pa7aaddv2$State=="NC",]
pa7aaddv2pa<-pa7aaddv2[pa7aaddv2$State=="PA",]
#write.csv(pa7aaddv2nc,file="NC_consent_info_all_kids.csv", row.names=F)
#write.csv(pa7aaddv2pa,file="PA_consent_info_all_kids.csv", row.names=F)
pa7<-subset(pa7a, PCSgnCHIPHCP==1)
#pa7<-subset(pa7a, PCSgnCHIPHCP==1&PCSgnCHIPMed==1)
#below two lines are just for check purpose, do not run
#pa71<-subset(pa7a, PCPermTCHlRc==1)
#test<-anti_join(pa71,pa7,by='S_ID')

View(pa7)
#keep id, state, sex dob, health record permit, and school names

pa7<-pa7[c(1,2,19,20,31,33,42:45,28,305)]
colnames(pa7)[1]='FLPID'
head(pa7)

# [1] 1331
colnames(bid)[1]='FLPID'

#get bids
pa7<-merge(pa7,bid,by='FLPID')
#pa7pa<-subset(pa7,pa7$State=='PA')#when choose PA subjects using State column
#pa7nc<-subset(pa7,pa7$State=='NC') #when choose NC subjects using State column
#PA part
consentpanamesall<-merge(pa7, allsubinsur, by="FLPID")
setnames(consentpanamesall, old=c("State.x",'state.x'), new=c("State","state"))
consentpanames<-subset(consentpanamesall,consentpanamesall$State=='PA')
consentncnames<-subset(consentpanamesall,consentpanamesall$State=='NC')

#consent subjects
#rerun mark nc1;
#Get the provider list. Change csv name every time
prolistpa<-read.csv(PAinputboxproviderlist)
prolistpa$ClinicName<-as.character(prolistpa$ClinicName)
prolistpa$groupid<-seq(1:nrow(prolistpa))
View(prolistpa)
m<-nrow(consentpanames)
p<-nrow(prolistpa)
for (i in 1:m){
  for (j in 1:p){
    if (grepl(consentpanames$clinicname3[i],prolistpa$allnames[j],fixed=TRUE)){ consentpanames$group[i]<- prolistpa$ClinicName[j]
    consentpanames$gid[i]<- prolistpa$groupid[j]
    break}
    else { consentpanames$group[i]<- NA
    consentpanames$gid[i]<- NA
    }
  }}
View(consentpanames)
#So far consentpanames contains consented children S_ID, BID, original provider name, and the final classified provider names. 
#write.csv(consentpanames,file='consentpanames.csv')
#check if any child with non-missing value in provider name column is classified as NA. There would be new provider names if this dataset is NOT NULL.
consentpanames1aa<-subset(consentpanames,(consentpanames$clinicname3!='Missing'&is.na(consentpanames$group)))

View(consentpanames1aa)


#should be none, if not, check this dataset to identify new clinics, rerun the process at rerun mark nc1. (#Get the provider list: prolistpa). 
#so far, one object (5515) was labeled as D. (don't know).

###################
# PAUSE here      #
#rerun mark nc1 if#
# necessary       #
###################

###rerun mark pa2
#consentpanames1: subset of those clinic name is not missing and group is not NA
consentpanames1<-subset(consentpanames,!(consentpanames$clinicname3=='Missing'&is.na(consentpanames$group)))
#write.csv(consentpanames1,file='consentpanames1.csv')
#consentpanames2: subset of those clinicname3 is missing and group is NA
consentpanames2<-subset(consentpanames,(consentpanames$clinicname3=='Missing'&is.na(consentpanames$group)))
#write.csv(consentpanames2,file='consentpanames2.csv')
#see if the flpids in consentpanames2 appeared in consentpanames1, supposed to be all true (which(!status)=0), then just use consentpanames1 instead of manually deleting missing-na combinations in consentpanames.csv. If it is not the case see below.
status<-consentpanames2$FLPID %in% consentpanames1$FLPID
consentpanames2$seqe<-seq(1:nrow(consentpanames2))
status
which(!status)
###################
# PAUSE here      
# to check if the reslut is 0, If not, change the values like below and rerun at the 'rerun mark pa2'.
#consentncnames$clinicname3[consentncnames$FLPID==878]<-'Unknown'
#consentncnames$group[consentncnames$FLPID==878]<-'Unknown'
###################



#output file=Box

#library(dplyr)
dist1<-consentpanames1 %>% distinct(group, FLPID)
dist2<-dist1%>% arrange(group, FLPID)
head(dist2)

#add all children names to the child list 
#allnames: all names from EchoCon\echoconpv_##.sas7bdat, change files each time;
allnames<-read.sas7bdat(consentnames)
#read.csv('allnames.csv')
namespa<-subset(allnames, allnames$State=='PA')
head(namespa)
names1<-namespa[c(1:7,9:20)] #names1<-names[c(1:7,9:20)]
head(names1)
names1$FLPID<-names1$S_ID
namemerge<-merge(dist2,names1,by='FLPID')
namemerge$TCBirCFirNam[namemerge$TCBirCFirNam==".D"]=''
namemerge$TCBirCMidNam[namemerge$TCBirCMidNam==".D"]=''
namemerge$TCBirCLstNam[namemerge$TCBirCLstNam==".D"]=''
namemerge$TCBirCFirNam[namemerge$TCBirCFirNam=="N/A"]=''
namemerge$TCBirCMidNam[namemerge$TCBirCMidNam=="N/A"]=''
namemerge$TCBirCLstNam[namemerge$TCBirCLstNam=="N/A"]=''

namemerge$newname<-paste(namemerge$TCBirCFirNam,namemerge$TCBirCMidNam,namemerge$TCBirCLstNam,by=' ')

setnames(namemerge, old=c("SFulName",'PCFulName','PCMaidenNam','TCBirCFirNam','TCBirCMidNam','TCBirCLstNam','newname'), new=c("ChildFullName", "ParentFullName",'ParentMaidenName','ChildFirstName','ChildMidName','ChildLastName','ChildFullName'))
head(namemerge)
names(namemerge)[22]<-'ChildNewFullName'

#pa7 is the list of subjects who gave consent (see SAS codes), which has bids
namemerge1<-merge(namemerge,pa7,by='FLPID')
namemerge2<-subset(namemerge1,!is.na(namemerge1$group))
nrow(namemerge2)

#you can skip this line if date of birth is read from SAS exported csv file where the dob is already in an appropriate date format.
#namemerge2$SDOB<-as.Date(namemerge2$SDOB, origin='1960-01-01')
#delete first column, S_ID, CaseID, state, adjust orders as boxpachildrenlist##.csv, fill missing names
namemerge2a = subset(namemerge2, select = c(FLPID, ChildFullName, group,ChildFirstName, ChildMidName, ChildLastName, ChildNewFullName, SSex, 
                                            SDOB, birthCert_ID, state,ParentFullName, ParentMaidenName,     PCFirAdrStr, PCFirAdrCty, 
                                            PCFirAdrSta,PCFirAdrZip) )

setnames(namemerge2a, old=c("group","SSex","SDOB"), new=c("ClinicName", "ChildSex","ChildDOB"))

namemerge2a<-namemerge2a[order(namemerge2a$ClinicName),]
View(namemerge2a)
namemerge2a$seqen<-seq(1:nrow(namemerge2a))
View(namemerge2a)
which(namemerge2a$ChildFirstName=="")

#change all factors to strings
str(namemerge2a)
fctr.cols <- sapply(namemerge2a, is.factor)
fctr.cols
namemerge2a[, fctr.cols] <- sapply(namemerge2a[, fctr.cols], as.character)
str(namemerge2a)

#filling missing names
#filling missing names
seqlist<- which(namemerge2a$ChildFirstName=="")

for (i in seqlist) {
  #separate fir/mid/last names and transform them into lower cases 
  missingnames<-strsplit(tolower(namemerge2a$ChildFullName[i]), " ")[[1]]
  #drop any ',' in the names
  missingnames<-gsub(",", "", missingnames)
  ifelse(head(missingnames,1) %in% c("mr","mr.","dr","dr.","mrs","mrs.","sir","sir.","miss","miss.","ms","ms."), 
         missingnames<-tail(missingnames,-1),
         missingnames<-missingnames)
  #identify valid last names, create new lastnames when they has suffixes 
  ifelse(tail(missingnames,1) %in% c("jr","jr.","sr","sr.","ii","iii","iv","iv."), 
         missingnames<-c(head(missingnames,-2), paste(head(tail(missingnames,2),-1), toupper(tail(missingnames,1)),sep=', ')),
         missingnames<-missingnames)
  #get the first names
  namemerge2a$ChildFirstName[i]<- paste(toupper(substring(missingnames[1],1,1)),substring(missingnames[1],2),sep="")
  #get the right midnames
  ifelse(length(missingnames)==2, 
         namemerge2a$ChildMidName[i]<-'',
         namemerge2a$ChildMidName[i]<- paste(toupper(substring(missingnames[2],1,1)),substring(missingnames[2],2),sep=""))
  ifelse(length(missingnames)==3, 
         namemerge2a$ChildLastName[i]<- paste(toupper(substring(missingnames[3],1,1)),substring(missingnames[3],2),sep=""),
         namemerge2a$ChildLastName[i]<-paste(toupper(substring(tail(missingnames,1),1,1)),substring(tail(missingnames,1),2),sep=""))
  #assemble new full names
  namemerge2a$ChildNewFullName[i]<-paste(namemerge2a$ChildFirstName[i], namemerge2a$ChildMidName[i], namemerge2a$ChildLastName[i],sep=" ")}

#check again, if not zero, repeat above procedures.
which(namemerge2a$ChildFirstName=="")

###########

namemerge2a<-namemerge2a[!((duplicated(namemerge2a$ChildFullName))&(namemerge2a$ClinicName=="ZUnknown")),]
namemerge2a<- namemerge2a[order(namemerge2a$ClinicName, namemerge2a$ChildFirstName),]
oldversion<-read.csv(PAinputboxchildlist)
namemerge2a$is.not.new<-namemerge2a$ChildNewFullName %in% oldversion$ChildNewFullName
write.csv(namemerge2a, file=PAoutputboxchildlist,row.names=F)
#delete the first and the second column (unsorted ids and old names)
namemerge2and<-namemerge2a[!duplicated(namemerge2a$FLPID),]
namemerge3and<-subset(namemerge2and,select=-c(FLPID, ChildFullName,seqen,state))
#write.csv(namemerge3and,file=PAconsentwithchildnames,row.names=F), this line will be excuted at the end
#count the frequency of patients in each provider
library(plyr)
y=count(namemerge2a, 'ClinicName')
colnames(y)<-c('ClinicName','freq')
View(y)
meg1<-merge(y,prolistpa,by='ClinicName', all=TRUE)
meg2<-subset(meg1,select=-c(groupid))

View(meg2)
write.csv(meg2, file=PAoutputboxproviderlist,row.names=F)
#delete first and other unnecessary columns.



#The end of PA lists
##############################################


##NC subjects
#head(pa7nc,8)
#consentncnames<-merge(pa7nc, allsubinsur, by="FLPID")
#consented subjects
###rerun mark nc1
#Get the provider list. Change csv name every time
#prolistnc<-read.csv("C:/Users/XUX67/Downloads/Echo/BOXNCProviderList010218.csv")
prolistnc<-read.csv(NCinputboxproviderlist)
prolistnc$ClinicName<-as.character(prolistnc$ClinicName)
prolistnc$groupid<-seq(1:nrow(prolistnc))

m<-nrow(consentncnames)
p<-nrow(prolistnc)
for (i in 1:m){
  for (j in 1:p){
    if (grepl(consentncnames$clinicname3[i],prolistnc$allnames[j],fixed=TRUE)){ consentncnames$group[i]<- prolistnc$ClinicName[j]
    consentncnames$gid[i]<- prolistnc$groupid[j]
    break}
    else { consentncnames$group[i]<- NA
    consentncnames$gid[i]<- NA}
  }}
#So far consentncnames contains consented children S_ID, BID, original provider name, and the final classified provider names. 
#write.csv(consentncnames,file='consentncnames.csv')
#check if any child with non-missing value in provider name column is classified as NA. There would be new provider names if this dataset is NOT NULL.
consentncnames1aa<-subset(consentncnames,(consentncnames$clinicname3!='Missing'&is.na(consentncnames$group)))

View(consentncnames1aa)

#should be none, if not, check this dataset to identify new clinics, rerun the process at "mark nc1". (#Get the provider list: prolistnc). 
#so far id 1009+692 is marked as unknown. 564 is a TX clinic
###################
 # PAUSE here      #
  #rerun mark nc1 if#
    # necessary      #
     ###################

###rerun mark nc2
#consentncnames1:subset of those clinicname3 is not missing and group is not NA
consentncnames1<-subset(consentncnames,!(consentncnames$clinicname3=='Missing'&is.na(consentncnames$group)))
#write.csv(consentncnames1,file='consentncnames1.csv')
#consentncnames2:subset of those clinicname3 is missing and group is NA
consentncnames2<-subset(consentncnames,(consentncnames$clinicname3=='Missing'&is.na(consentncnames$group)))
#write.csv(consentncnames2,file='consentncnames2.csv')
#see if the flpids in consentpanames2 appeared in consentpanames1, supposed to be all true (which(!status)=0), then just use consentpanames1 instead of manually deleting missing-na combinations in consentpanames.csv. If it is not the case see below.
status<-consentncnames2$FLPID %in% consentncnames1$FLPID
consentncnames2$seqe<-seq(1:nrow(consentncnames2))
status
which(!status)
#should be zero or something like [1] 334 335 446 447 448 449 450 451. So far there are three TCs have no provider info. Change the values like below and rerun at the rerun mark nc2 (brown part).
##########
#pause here to check
##########
#consentncnames$clinicname3[consentncnames$FLPID==878]<-'Unknown'
#consentncnames$group[consentncnames$FLPID==878]<-'Unknown'
#consentncnames$clinicname3[consentncnames$FLPID==1113]<-'Unknown'
#consentncnames$group[consentncnames$FLPID==1113]<-'Unknown'
#consentncnames$clinicname3[consentncnames$FLPID==1257]<-'Unknown'
#consentncnames$group[consentncnames$FLPID==1257]<-'Unknown'



head(consentncnames)
#output file=Box
library(dplyr)
dist1<-consentncnames %>% distinct(group, FLPID)
dist2<-dist1%>% arrange(group, FLPID)
head(dist2)
#add all children names to the child list 
#allnames: all names from EchoCon\echoconpv_##.sas7bdat, change files each time;
allnames<-read.sas7bdat(consentnames)
namesnc<-subset(allnames, allnames$State=='NC')
head(namesnc)
names1<-namesnc[c(1:7,9:20)] #names1<-names[c(1:7,9:20)]
head(names1)
names1$FLPID<-names1$S_ID
namencmerge<-merge(dist2,names1,by='FLPID')

fctr.cols <- sapply(namencmerge, is.factor)
fctr.cols

namencmerge[, fctr.cols] <- sapply(namencmerge[, fctr.cols], as.character)

namencmerge$TCBirCFirNam[namencmerge$TCBirCFirNam==".D"]=''
namencmerge$TCBirCMidNam[namencmerge$TCBirCMidNam==".D"]=''
namencmerge$TCBirCLstNam[namencmerge$TCBirCLstNam==".D"]=''
namencmerge$TCBirCFirNam[namencmerge$TCBirCFirNam=="N/A"]=''
namencmerge$TCBirCMidNam[namencmerge$TCBirCMidNam=="N/A"]=''
namencmerge$TCBirCLstNam[namencmerge$TCBirCLstNam=="N/A"]=''

namencmerge$newname<-paste(namencmerge$TCBirCFirNam,namencmerge$TCBirCMidNam,namencmerge$TCBirCLstNam,by=' ')
library(data.table)
setnames(namencmerge, old=c("SFulName",'PCFulName','PCMaidenNam','TCBirCFirNam','TCBirCMidNam','TCBirCLstNam','newname'), new=c("ChildFullName", "ParentFullName",'ParentMaidenName','ChildFirstName','ChildMidName','ChildLastName','ChildFullName'))
head(namencmerge)
names(namencmerge)[22]<-'ChildNewFullName'

#pa7 is the list of subjects who gave consent (see SAS codes), which has bids
namencmerge1<-merge(namencmerge,pa7,by='FLPID')
namencmerge2<-subset(namencmerge1,!is.na(namencmerge1$group))
nrow(namencmerge2)
#you can skip this line if date of birth is read from SAS exported csv file where the dob is already in an appropriate date format.
namencmerge2$SDOB<-as.Date(namencmerge2$SDOB, origin='1960-01-01')
#delete first column, S_ID, CaseID, state, adjust orders as boxncchildrenlist0717.csv, fill missing names
namencmerge2a = subset(namencmerge2, select = c(FLPID, ChildFullName, group,ChildFirstName, ChildMidName, ChildLastName, ChildNewFullName,SSex, SDOB, birthCert_ID, state,ParentFullName, ParentMaidenName,     PCFirAdrStr, PCFirAdrCty, PCFirAdrSta,PCFirAdrZip) )

setnames(namencmerge2a, old=c("group","SSex","SDOB"), new=c("ClinicName", "ChildSex","ChildDOB"))

namencmerge2a<-namencmerge2a[order(namencmerge2a$ClinicName),]
View(namencmerge2a)
namencmerge2a$seqen<-seq(1:nrow(namencmerge2a))
View(namencmerge2a)
which(namencmerge2a$ChildFirstName=="")
#fill missing names based on given seqen ids. Need to look at the raw sas data.

fctr.cols <- sapply(namencmerge2a, is.factor)
fctr.cols
namencmerge2a[, fctr.cols] <- sapply(namencmerge2a[, fctr.cols], as.character)

#filling missing names
seqlist<- which(namencmerge2a$ChildFirstName=="")

for (i in seqlist) {
  #separate fir/mid/last names and transform them into lower cases 
  missingnames<-strsplit(tolower(namencmerge2a$ChildFullName[i]), " ")[[1]]
  #drop any ',' in the names
  missingnames<-gsub(",", "", missingnames)
  ifelse(head(missingnames,1) %in% c("mr","mr.","dr","dr.","mrs","mrs.","sir","sir.","miss","miss.","ms","ms."), 
         missingnames<-tail(missingnames,-1),
         missingnames<-missingnames)
  #identify valid last names, create new lastnames when they has suffixes 
  ifelse(tail(missingnames,1) %in% c("jr","jr.","sr","sr.","ii","iii","iv","iv."), 
         missingnames<-c(head(missingnames,-2), paste(head(tail(missingnames,2),-1), toupper(tail(missingnames,1)),sep=', ')),
         missingnames<-missingnames)
  #get the first names
  namencmerge2a$ChildFirstName[i]<- paste(toupper(substring(missingnames[1],1,1)),substring(missingnames[1],2),sep="")
  #get the right midnames
  ifelse(length(missingnames)==2, 
         namencmerge2a$ChildMidName[i]<-'',
         namencmerge2a$ChildMidName[i]<- paste(toupper(substring(missingnames[2],1,1)),substring(missingnames[2],2),sep=""))
  ifelse(length(missingnames)==3, 
         namencmerge2a$ChildLastName[i]<- paste(toupper(substring(missingnames[3],1,1)),substring(missingnames[3],2),sep=""),
         namencmerge2a$ChildLastName[i]<-paste(toupper(substring(tail(missingnames,1),1,1)),substring(tail(missingnames,1),2),sep=""))
  #assemble new full names
  namencmerge2a$ChildNewFullName[i]<-paste(namencmerge2a$ChildFirstName[i], namencmerge2a$ChildMidName[i], namencmerge2a$ChildLastName[i],sep=" ")}




#check again, if not zero, repeat above procedures.
which(namencmerge2a$ChildFirstName=="")
############
namencmerge2a<-namencmerge2a[!((duplicated(namencmerge2a$ChildFullName))&(namencmerge2a$ClinicName=="ZUnknown")),]

namencmerge2a<- namencmerge2a[order(namencmerge2a$ClinicName, namencmerge2a$ChildFirstName),]
oldversionnc<-read.csv(NCinputboxchildlist)
namencmerge2a$is.not.new<-namencmerge2a$ChildNewFullName %in% oldversionnc$ChildNewFullName
write.csv(namencmerge2a, file=NCoutputboxchildlist,row.names=F)
#delete first and other unnecessary columns.
namencmerge2and<-namencmerge2a[!duplicated(namencmerge2a$FLPID),]
#namencmerge3and<-subset(namencmerge2and,select=-c(FLPID, ChildFullName,seqen))
namencmerge3and<-subset(namencmerge2and,select=-c(ChildFullName,seqen))
namemerge3and<-subset(namemerge2and,select=-c(ChildFullName,seqen,state))
write.csv(namencmerge3and,file=NCconsentwithchildnames,row.names=F)
existedaddnc<-merge(namencmerge3and, pa7aaddv2nc, by="birthCert_ID")
existedaddpa<-merge(namemerge3and, pa7aaddv2pa, by="birthCert_ID")
#existedaddnc<-read.csv("NCConsentListWithUniqueNames010419new.csv")
#existedaddpa<-read.csv("PAConsentListWithUniqueNames010419new.csv")
existedaddpa<-existedaddpa[order(existedaddpa$ClinicName,existedaddpa$ChildFirstName),]
existedaddnc<-existedaddnc[order(existedaddnc$ClinicName,existedaddnc$ChildFirstName),]
write.csv(existedaddnc,file=NCconsentwithchildnames,row.names=F)
write.csv(existedaddpa,file=PAconsentwithchildnames,row.names=F)
#count the frequency of patients in each provider
library(plyr)
y=count(namencmerge2a, 'ClinicName')
colnames(y)<-c('ClinicName','freq')
View(y)
meg1<-merge(y,prolistnc,by ='ClinicName', all=TRUE)
meg2<-subset(meg1,select=-c(groupid))
#meg2<-subset(meg2,select=c(ClinicName, freq, allnames,State,address,city,zip,tel,notes))
View(meg2)
write.csv(meg2, file=NCoutputboxproviderlist,row.names=F)
#delete first and other unnecessary columns.


